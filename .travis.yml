language: node_js
node_js:
  - "node"
cache: npm
addons:
  apt:
    update: true
    packages:
      - sqlite3

services:
  # Use docker for the databases, so that we can support Microsoft SQL Server in the tests.
  - docker

env:
  global:
    - SQLITE=y

    # Docker-based database settings.
    # These values are based on the docker-compose parameters.
    - MYSQL_DB=tern
    - MYSQL_USERNAME=tern-user
    - MYSQL_PASSWORD=tern-pw
    - MYSQL_PORT=19000

    - POSTGRES_DB=tern
    - POSTGRES_USERNAME=tern-user
    - POSTGRES_PASSWORD=tern-pw
    - POSTGRES_PORT=19001

    - MSSQL_DB=master
    - MSSQL_USERNAME=sa
    - MSSQL_PASSWORD=tern-pw-1234
    - MSSQL_PORT=19002


#before_install:

install:
  - docker-compose -f packages/datastore-sql/docker-tests/docker-compose.yml up -d
  - npm install
  - npm run bootstrap
  # Wait for the docker services to start
  - echo "Waiting for MySQL" ; timeout 22 bash -c 'until printf "" 2>>/dev/null >>/dev/tcp/$0/$1; do sleep 1; done' localhost 19000
  - echo "Waiting for PostGreSQL" ; timeout 22 bash -c 'until printf "" 2>>/dev/null >>/dev/tcp/$0/$1; do sleep 1; done' localhost 19001
  - echo "Waiting for MS SQL" ; timeout 22 bash -c 'until printf "" 2>>/dev/null >>/dev/tcp/$0/$1; do sleep 1; done' localhost 19002

jobs:
  include:
    - stage: "Build and Test"
      name: "TypeScript Compile and Test"
      script: "npm run build && npm run test"

